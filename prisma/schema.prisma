// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         Int      @id @default(autoincrement())
  email      String   @unique
  name       String?
  provider   String
  providerId String
  createdAt  DateTime @default(now())
  avatar     String?

  teachingCourses Course[]        @relation("Teacher")
  enrolledCourses CourseStudent[]
  privileges      UserPrivilege[]
}

model Course {
  id         Int      @id @default(autoincrement())
  code       String   @unique
  id_teacher Int
  title      String   @default("Sin título")
  createdAt  DateTime @default(now())

  teacher  User            @relation("Teacher", fields: [id_teacher], references: [id])
  students CourseStudent[]

  // Relación muchos a muchos con Topic
  topics CourseTopics[]
}

model CourseStudent {
  id         Int @id @default(autoincrement())
  id_course  Int
  id_student Int

  course  Course @relation(fields: [id_course], references: [id])
  student User   @relation(fields: [id_student], references: [id])

  @@unique([id_course, id_student])
}

model Privilege {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  description String?
  category    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  users UserPrivilege[]
}

model UserPrivilege {
  id          Int      @id @default(autoincrement())
  userId      Int
  privilegeId Int
  assignedAt  DateTime @default(now())

  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  privilege Privilege @relation(fields: [privilegeId], references: [id], onDelete: Cascade)

  @@unique([userId, privilegeId])
}

model CourseBase {
  id        Int      @id @default(autoincrement())
  title     String   @default("Python")
  status    String   @default("activo")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  units Unit[]
}

model Unit {
  id        Int      @id @default(autoincrement())
  title     String
  index     Int
  published Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  courseBaseId Int
  courseBase   CourseBase @relation(fields: [courseBaseId], references: [id])

  lessons Lesson[]
}

model Lesson {
  id        Int      @id @default(autoincrement())
  title     String
  index     Int
  duration  Int?
  content   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  unitId Int
  unit   Unit @relation(fields: [unitId], references: [id], onDelete: Cascade)

  topics Topic[]
}

model Topic {
  id          Int      @id @default(autoincrement())
  name        String
  type        String   @default("content") // 'content' | 'evaluation'
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  lessonId Int?
  lesson   Lesson? @relation(fields: [lessonId], references: [id])

  content Content?
  courses CourseTopics[]
}

model Content {
  id          Int      @id @default(autoincrement())
  htmlFileUrl String? // URL del archivo HTML en GCS
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  topicId Int   @unique
  topic   Topic @relation(fields: [topicId], references: [id], onDelete: Cascade)

  resources Resource[]
}

model Resource {
  id          Int          @id @default(autoincrement())
  filename    String
  resourceUrl String
  type        ResourceType
  size        Int?
  mimeType    String
  createdAt   DateTime     @default(now())

  contentId Int
  content   Content @relation(fields: [contentId], references: [id], onDelete: Cascade)
}

// Tabla intermedia para Course-Topic (muchos a muchos)
model CourseTopics {
  courseId  Int
  topicId   Int
  order     Int?
  createdAt DateTime @default(now())

  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)
  topic  Topic  @relation(fields: [topicId], references: [id], onDelete: Cascade)

  @@id([courseId, topicId])
}

enum TopicType {
  content
  evaluation
}

enum ResourceType {
  IMAGE
  VIDEO
  AUDIO
  DOCUMENT
  OTHER
}
